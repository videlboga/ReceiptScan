#!/usr/bin/env python3
"""–ì–∏–±–∫–∏–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
import os
import asyncio
import tempfile
import subprocess
from datetime import datetime
from typing import Optional
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from pdf2image import convert_from_path
import PyPDF2
from loguru import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–∏–±–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from validation.flexible_validator_v1 import FlexibleReceiptValidator
from validation.flexible_parser_v1 import FlexibleReceiptParser

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class FlexibleReceiptChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ —Å –≥–∏–±–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""

    def __init__(self, config_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫–∞.

        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.validator = FlexibleReceiptValidator(config_path)
        self.parser = FlexibleReceiptParser(config_path)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCR
        self.ocr_config = {
            'psm_modes': ['6', '3', '4', '8'],
            'languages': 'rus+eng',
            'oem_mode': '3',
            'timeout': 30
        }

        logger.info("–ì–∏–±–∫–∏–π –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ —á–µ–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def process_receipt(self, file_path: str) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(file_path)[1].lower()
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path} (—Ç–∏–ø: {file_ext})")

            if file_ext == '.pdf':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                text = await self.extract_text_from_pdf(file_path)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                text = await self.extract_text(file_path)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –≥–∏–±–∫–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            validation_result = self.validator.validate_receipt(text)

            return {
                'success': True,
                'text': text,
                'validation': validation_result,
                'parsed_data': self.parser.parse_receipt(text)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def extract_text_from_pdf(self, pdf_path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞."""
        try:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF: {pdf_path}")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PDF
            try:
                with open(pdf_path, 'rb') as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    text = ""
                    for page in pdf_reader.pages:
                        text += page.extract_text() + "\n"

                    if text.strip():
                        logger.info(f"–¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF –Ω–∞–ø—Ä—è–º—É—é: {text[:200]}...")
                        return text.strip()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é: {e}")

            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR
            logger.info("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            images = convert_from_path(pdf_path, dpi=300)

            all_text = ""
            for i, image in enumerate(images):
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(images)}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_img:
                    image.save(temp_img.name, 'PNG')

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
                    page_text = await self.extract_text(temp_img.name)
                    all_text += page_text + "\n"

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_img.name)

            logger.info(f"–¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF —á–µ—Ä–µ–∑ OCR: {all_text[:200]}...")
            return all_text.strip()

        except Exception as e:
            raise Exception(f"PDF processing error: {str(e)}")

    async def extract_text(self, image_path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract."""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫–∞—é Tesseract –¥–ª—è —Ñ–∞–π–ª–∞: {image_path}")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            psm_modes = self.ocr_config['psm_modes']
            best_text = ""
            all_results = {}

            for psm in psm_modes:
                logger.debug(f"–ü—Ä–æ–±—É—é —Ä–µ–∂–∏–º PSM {psm}")
                result = subprocess.run([
                    'tesseract', image_path, 'stdout',
                    '-l', self.ocr_config['languages'], '--psm', psm,
                    '--oem', self.ocr_config['oem_mode']
                ], capture_output=True, text=True, timeout=self.ocr_config['timeout'])

                if result.returncode == 0:
                    text = result.stdout.strip()
                    all_results[psm] = text
                    logger.debug(f"PSM {psm} —É—Å–ø–µ—à–Ω–æ: {text[:100]}...")

                    if len(text) > len(best_text):
                        best_text = text
                else:
                    logger.warning(f"PSM {psm} failed: {result.stderr}")
                    all_results[psm] = f"ERROR: {result.stderr}"

            if not best_text:
                logger.error("–í—Å–µ —Ä–µ–∂–∏–º—ã PSM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏!")
                logger.debug("–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                for psm, text in all_results.items():
                    logger.debug(f"PSM {psm}: {text}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∏ –æ–¥–Ω–∏–º —Ä–µ–∂–∏–º–æ–º")

            logger.info(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª–∏–Ω–∞: {len(best_text)}): {best_text[:200]}...")
            return best_text

        except subprocess.TimeoutExpired:
            raise Exception("Tesseract timeout")
        except Exception as e:
            raise Exception(f"OCR error: {str(e)}")

    def get_validation_summary(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        config = self.validator.get_config()

        return {
            'valid_phones': config.get('phone_validation', {}).get('valid_phones', []),
            'valid_amounts': config.get('amount_validation', {}).get('valid_amounts', []),
            'valid_accounts': config.get('account_validation', {}).get('valid_accounts', []),
            'valid_cards': config.get('account_validation', {}).get('valid_cards', []),
            'min_confidence': config.get('validation', {}).get('min_confidence', 50.0),
            'amount_tolerance': config.get('validation', {}).get('amount_tolerance', 0.01)
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫–∞
checker = FlexibleReceiptChecker()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    summary = checker.get_validation_summary()

    message = (
        "ü§ñ **–ì–∏–±–∫–∏–π –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ v1**\n\n"
        "üéØ **–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n"
        f"‚Ä¢ **–í–∞–ª–∏–¥–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã:** {len(summary['valid_phones'])} –Ω–æ–º–µ—Ä–æ–≤\n"
        f"‚Ä¢ **–í–∞–ª–∏–¥–Ω—ã–µ —Å—É–º–º—ã:** {len(summary['valid_amounts'])} –∑–Ω–∞—á–µ–Ω–∏–π\n"
        f"‚Ä¢ **–í–∞–ª–∏–¥–Ω—ã–µ —Å—á–µ—Ç–∞:** {len(summary['valid_accounts'])} —Å—á–µ—Ç–æ–≤\n"
        f"‚Ä¢ **–í–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã:** {len(summary['valid_cards'])} –∫–∞—Ä—Ç\n"
        f"‚Ä¢ **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {summary['min_confidence']}%\n"
        f"‚Ä¢ **–¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã:** ¬±{summary['amount_tolerance']} —Ä—É–±\n\n"
        "‚úÖ **–ß–µ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏:**\n"
        "‚Ä¢ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö\n"
        "‚Ä¢ –ù–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —Å—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö\n"
        "‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ‚â• –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π\n\n"
        "üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –∏–ª–∏ PDF —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏**"
    )

    await update.message.reply_text(message)

async def config_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /config - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    summary = checker.get_validation_summary()

    message = "‚öôÔ∏è **–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n\n"

    if summary['valid_phones']:
        message += f"üì± **–í–∞–ª–∏–¥–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã:**\n"
        for phone in summary['valid_phones']:
            message += f"‚Ä¢ {phone}\n"
        message += "\n"

    if summary['valid_amounts']:
        message += f"üí∞ **–í–∞–ª–∏–¥–Ω—ã–µ —Å—É–º–º—ã:**\n"
        for amount in summary['valid_amounts']:
            message += f"‚Ä¢ {amount} —Ä—É–±\n"
        message += "\n"

    if summary['valid_accounts']:
        message += f"üè¶ **–í–∞–ª–∏–¥–Ω—ã–µ —Å—á–µ—Ç–∞:**\n"
        for account in summary['valid_accounts']:
            message += f"‚Ä¢ {account}\n"
        message += "\n"

    if summary['valid_cards']:
        message += f"üí≥ **–í–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã:**\n"
        for card in summary['valid_cards']:
            message += f"‚Ä¢ {card}\n"
        message += "\n"

    message += f"üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
    message += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {summary['min_confidence']}%\n"
    message += f"‚Ä¢ –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã: ¬±{summary['amount_tolerance']} —Ä—É–±\n"

    await update.message.reply_text(message)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ–∫ —Å –≥–∏–±–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(update.message.photo[-1].file_id)
        logger.info(f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file.file_id}, —Ä–∞–∑–º–µ—Ä: {file.file_size} –±–∞–π—Ç")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_file.name}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
            logger.info("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ–∫–∞...")
            result = await checker.process_receipt(temp_file.name)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file.name}")

        if result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_result(update, result)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF)."""
    document = update.message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
    if not document.file_name.lower().endswith('.pdf'):
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    logger.info("–ü–æ–ª—É—á–µ–Ω PDF –¥–æ–∫—É–º–µ–Ω—Ç")
    await update.message.reply_text("üìÑ PDF –ø–æ–ª—É—á–µ–Ω! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ–∫ —Å –≥–∏–±–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        logger.info(f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file.file_id}, –∏–º—è: {document.file_name}, —Ä–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_file.name}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
            logger.info("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ–∫–∞...")
            result = await checker.process_receipt(temp_file.name)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file.name}")

        if result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_result(update, result)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def send_result(update: Update, result: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    validation = result['validation']
    parsed_data = result['parsed_data']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ–∫–∞:**\n\n"

    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if validation.is_valid:
        message += "üéâ **–°–¢–ê–¢–£–°: –ß–ï–ö –í–ê–õ–ò–î–ï–ù!**\n"
        message += f"üìà **–û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:** {validation.confidence_score:.1f}%\n\n"
    else:
        message += "‚ùå **–°–¢–ê–¢–£–°: –ß–ï–ö –ù–ï –í–ê–õ–ò–î–ï–ù**\n"
        message += f"üìâ **–û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:** {validation.confidence_score:.1f}%\n\n"

    # –î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    message += "üìã **–î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n"
    message += validation.message + "\n\n"

    # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    message += "üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
    if parsed_data.amount:
        message += f"üí∞ –°—É–º–º–∞: {parsed_data.amount} —Ä—É–±\n"
    else:
        message += "üí∞ –°—É–º–º–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"

    if parsed_data.recipient_phone:
        message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {parsed_data.recipient_phone}\n"
    else:
        message += "üì± –¢–µ–ª–µ—Ñ–æ–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω\n"

    if parsed_data.recipient_account:
        message += f"üè¶ –°—á–µ—Ç/–∫–∞—Ä—Ç–∞: {parsed_data.recipient_account}\n"
    else:
        message += "üè¶ –°—á–µ—Ç/–∫–∞—Ä—Ç–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

    if parsed_data.date:
        message += f"üìÖ –î–∞—Ç–∞: {parsed_data.date.strftime('%d.%m.%Y')}\n"

    if parsed_data.time:
        message += f"üïê –í—Ä–µ–º—è: {parsed_data.time.strftime('%H:%M:%S')}\n"

    message += f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR: {parsed_data.confidence:.1f}%\n"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if validation.recommendations:
        message += "\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        for recommendation in validation.recommendations:
            message += f"‚Ä¢ {recommendation}\n"

    await update.message.reply_text(message)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("–ó–∞–ø—É—Å–∫ –≥–∏–±–∫–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ v1...")
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {BOT_TOKEN[:20]}...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("config", config_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    logger.info("–ì–∏–±–∫–∏–π –±–æ—Ç v1 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("–û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
