"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞."""
import asyncio
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger

from database.database import DatabaseManager
from database.models import ValidationRule
from ocr.tesseract_processor import TesseractProcessor
from ocr.receipt_parser import ReceiptParser
from validation.validator import ReceiptValidator
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from files.file_manager import FileManager

class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""

    def __init__(self):
        self.ocr_processor = TesseractProcessor()
        self.receipt_parser = ReceiptParser()
        self.validator = ReceiptValidator()
        self.file_manager = FileManager()

        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        self.file_manager.create_default_template()

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        chat_id = update.effective_chat.id

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with DatabaseManager() as db:
            db.create_or_update_user_session(
                user_id=user.id,
                chat_id=chat_id,
                current_state='idle'
            )

        welcome_message = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞
2. –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç —Å—É–º–º—É –∏ —Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
4. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–¥–∞—Å—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ JPG, PNG, JPEG
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB

**–ö–æ–º–∞–Ω–¥—ã:**
/help - –°–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏! üì∏
        """

        await update.message.reply_text(welcome_message, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_message = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —á–µ–∫–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –∏ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –í—ã–¥–∞—á–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ

**–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –°–¥–µ–ª–∞–π—Ç–µ —á–µ—Ç–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–±—ã—á–Ω–æ 10-30 —Å–µ–∫—É–Ω–¥)
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
‚Ä¢ –í–µ—Å—å —á–µ–∫ –≤ –∫–∞–¥—Ä–µ
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, JPEG

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
‚Ä¢ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ ‚Üí —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
‚Ä¢ –ù–µ—á–µ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç ‚Üí —É–ª—É—á—à–∏—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ‚Üí –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —É–≥–æ–ª

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """

        await update.message.reply_text(help_message, parse_mode='Markdown')

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
        user = update.effective_user

        with DatabaseManager() as db:
            receipts = db.get_user_receipts(user.id, limit=5)

        if not receipts:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.")
            return

        status_message = "üìä **–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–µ–∫–æ–≤:**\n\n"

        for receipt in receipts:
            status_emoji = "‚úÖ" if receipt.is_valid else "‚ùå"
            amount = f"{receipt.amount:.2f} —Ä—É–±." if receipt.amount else "N/A"
            date = receipt.created_at.strftime("%d.%m.%Y %H:%M")

            status_message += f"{status_emoji} {date}\n"
            status_message += f"   –°—É–º–º–∞: {amount}\n"
            status_message += f"   –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–µ–Ω' if receipt.is_valid else '–û—à–∏–±–∫–∞'}\n\n"

        await update.message.reply_text(status_message, parse_mode='Markdown')

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
        user = update.effective_user
        chat_id = update.effective_chat.id
        message = update.message

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ–∫... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            file = await context.bot.get_file(photo.file_id)

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = await file.download_as_bytearray()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with DatabaseManager() as db:
                receipt = db.create_receipt(
                    user_id=user.id,
                    chat_id=chat_id,
                    message_id=message.message_id
                )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await self._process_receipt_image(
                context, processing_msg, receipt.id, image_data, user.id
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await processing_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑."
            )

    async def _process_receipt_image(self, context: ContextTypes.DEFAULT_TYPE,
                                   processing_msg, receipt_id: int,
                                   image_data: bytes, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞."""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
            text, confidence = self.ocr_processor.extract_text(image_data)

            if not text or confidence < 30:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ–∫–µ. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ."
                )
                return

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
            receipt_data = self.receipt_parser.parse_receipt(text, confidence)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            with DatabaseManager() as db:
                validation_rules = db.get_active_validation_rules()

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ–∫
            validation_result = self.validator.validate_receipt(receipt_data, validation_rules)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with DatabaseManager() as db:
                db.update_receipt(
                    receipt_id,
                    amount=receipt_data.amount,
                    recipient_account=receipt_data.recipient_account,
                    date=receipt_data.date,
                    raw_text=text,
                    confidence=confidence,
                    is_valid=validation_result.is_valid,
                    validation_message=validation_result.message
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_validation_result(
                context, processing_msg, receipt_data, validation_result
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {e}")
            await processing_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def _send_validation_result(self, context: ContextTypes.DEFAULT_TYPE,
                                    processing_msg, receipt_data, validation_result):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        if validation_result.is_valid:
            # –£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            success_message = f"""
‚úÖ **–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω!**

üìä **–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:**
‚Ä¢ –°—É–º–º–∞: {receipt_data.amount:.2f} —Ä—É–±.
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {receipt_data.recipient_account}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {receipt_data.confidence:.1f}%
‚Ä¢ –î–∞—Ç–∞: {receipt_data.date.strftime('%d.%m.%Y') if receipt_data.date else 'N/A'}

{validation_result.message}
            """

            await processing_msg.edit_text(success_message, parse_mode='Markdown')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if validation_result.file_to_send:
                file_path = self.file_manager.get_file_path(validation_result.file_to_send)
                if file_path:
                    await context.bot.send_document(
                        chat_id=processing_msg.chat_id,
                        document=open(file_path, 'rb'),
                        caption="üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞"
                    )
                else:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                    cert_data = {
                        'amount': receipt_data.amount,
                        'recipient_account': receipt_data.recipient_account,
                        'confidence': receipt_data.confidence,
                        'items': receipt_data.items
                    }
                    cert_path = self.file_manager.generate_certificate(cert_data)
                    if cert_path:
                        await context.bot.send_document(
                            chat_id=processing_msg.chat_id,
                            document=open(cert_path, 'rb'),
                            caption="üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞"
                        )
        else:
            # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            error_message = f"""
‚ùå **–ß–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É**

üìä **–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:**
‚Ä¢ –°—É–º–º–∞: {receipt_data.amount:.2f} —Ä—É–±. if receipt_data.amount else 'N/A'
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {receipt_data.recipient_account or 'N/A'}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {receipt_data.confidence:.1f}%

**–ü—Ä–∏—á–∏–Ω–∞:** {validation_result.message}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ —á–µ–∫–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
            """

            await processing_msg.edit_text(error_message, parse_mode='Markdown')

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")

        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
