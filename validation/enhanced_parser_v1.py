"""–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤."""
import re
import yaml
from datetime import datetime
from typing import Dict, Optional, Tuple, List, Any
from dataclasses import dataclass
from pathlib import Path

@dataclass
class ParsedData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞."""
    amount: Optional[float] = None
    recipient_phone: Optional[str] = None
    recipient_account: Optional[str] = None
    date: Optional[datetime] = None
    time: Optional[datetime] = None
    raw_text: str = ""
    confidence: float = 0.0
    items: List[Dict] = None
    validation_matches: Dict[str, bool] = None
    debug_info: Dict[str, Any] = None

    def __post_init__(self):
        if self.items is None:
            self.items = []
        if self.validation_matches is None:
            self.validation_matches = {}
        if self.debug_info is None:
            self.debug_info = {}

class EnhancedReceiptParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —á–µ–∫–æ–≤ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –Ω–æ–º–µ—Ä–æ–≤."""

    def __init__(self, config_path: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.config = self._load_config(config_path)
        self._compile_patterns()

    def _load_config(self, config_path: str = None) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
        if config_path is None:
            config_path = Path(__file__).parent.parent / "validation_config_v1.yaml"

        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            return config
        except FileNotFoundError:
            return self._get_default_config()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self._get_default_config()

    def _get_default_config(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        return {
            'phone_validation': {
                'valid_phones': ['79879335515', '+79879335515', '89879335515'],
                'keywords': ['—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–º–æ–±–∏–ª—å–Ω—ã–π', '–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω', '–ø–æ–ª—É—á–∞—Ç–µ–ª—å', '–∫–æ–Ω—Ç–∞–∫—Ç']
            },
            'amount_validation': {
                'valid_amounts': [1500.00, 1500, 1500.0],
                'keywords': ['—Å—É–º–º–∞', '–∏—Ç–æ–≥–æ', '–∫ –æ–ø–ª–∞—Ç–µ', '–ø–µ—Ä–µ–≤–æ–¥']
            },
            'account_validation': {
                'valid_accounts': ['40817810099910004312'],
                'valid_cards': ['2200590431900533'],
                'keywords': ['—Å—á–µ—Ç', '–∫–∞—Ä—Ç–∞', '–ø–æ–ª—É—á–∞—Ç–µ–ª—å']
            }
        }

    def _compile_patterns(self):
        """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
        self.compiled_patterns = {}

        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        phone_patterns = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            r'(\+?7|8)[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{2})[\s\-\(\)]?(\d{2})',
            r'(\+?7|8)[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{4})',
            r'(\+?7|8)[\s\-\(\)]?(\d{4})[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{3})',
            r'(\+?7|8)(\d{10})',

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ OCR
            r'(\+?7|8)[\s\-\(\)]?(\d{1,3})[\s\-\(\)]?(\d{1,3})[\s\-\(\)]?(\d{1,3})[\s\-\(\)]?(\d{1,3})',
            r'(\+?7|8)[\s\-\(\)]?(\d{2,4})[\s\-\(\)]?(\d{2,4})[\s\-\(\)]?(\d{2,4})',
            r'(\+?7|8)[\s\-\(\)]?(\d{3,4})[\s\-\(\)]?(\d{3,4})[\s\-\(\)]?(\d{2,4})',

            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ OCR
            r'(\+?7|8)[\s\-\(\)]?(\d{2,3})[\s\-\(\)]?(\d{2,3})[\s\-\(\)]?(\d{2,3})[\s\-\(\)]?(\d{2,3})',
            r'(\+?7|8)[\s\-\(\)]?(\d{1,4})[\s\-\(\)]?(\d{1,4})[\s\-\(\)]?(\d{1,4})[\s\-\(\)]?(\d{1,4})',

            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ 11 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
            r'(\+?7|8)(\d{10})',
            r'(\+?7|8)(\d{9,11})',
        ]

        self.compiled_patterns['phone'] = []
        for pattern in phone_patterns:
            try:
                compiled = re.compile(pattern, re.IGNORECASE)
                self.compiled_patterns['phone'].append(compiled)
            except re.error as e:
                print(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—É–º–º
        amount_patterns = [
            r'(\d+(?:[.,]\d{2})?)\s*(?:—Ä—É–±|‚ÇΩ|rub|—Ä\.)',
            r'(?:—Å—É–º–º–∞|–∏—Ç–æ–≥–æ|–∫ –æ–ø–ª–∞—Ç–µ)[\s:]*(\d+(?:[.,]\d{2})?)',
            r'(\d+(?:[.,]\d{2})?)\s*(?:‚Ç¨|eur|euro)',
            r'(\d+(?:[.,]\d{2})?)\s*(?:\$|usd|dollar)',
        ]

        self.compiled_patterns['amount'] = []
        for pattern in amount_patterns:
            try:
                compiled = re.compile(pattern, re.IGNORECASE)
                self.compiled_patterns['amount'].append(compiled)
            except re.error as e:
                print(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å—É–º–º—ã: {e}")

    def parse_receipt(self, text: str, confidence: float = 0.0) -> ParsedData:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —á–µ–∫–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ–∫–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR: {confidence:.1f}%)")
        print(f"üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")

        parsed_data = ParsedData(
            raw_text=text,
            confidence=confidence
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        parsed_data.recipient_phone = self._extract_phone_aggressive(text)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É
        parsed_data.amount = self._extract_amount(text)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç/–∫–∞—Ä—Ç—É
        parsed_data.recipient_account = self._extract_account(text)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        parsed_data.date, parsed_data.time = self._extract_datetime(text)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏
        parsed_data.items = self._extract_items(text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        parsed_data.validation_matches = self._validate_against_config(parsed_data)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        parsed_data.debug_info = {
            'text_preview': text[:200] + '...' if len(text) > 200 else text,
            'phone_search_attempts': len(self.compiled_patterns['phone']),
            'amount_search_attempts': len(self.compiled_patterns['amount'])
        }

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"  üì± –¢–µ–ª–µ—Ñ–æ–Ω: {parsed_data.recipient_phone}")
        print(f"  üí∞ –°—É–º–º–∞: {parsed_data.amount}")
        print(f"  üè¶ –°—á–µ—Ç: {parsed_data.recipient_account}")

        return parsed_data

    def _extract_phone_aggressive(self, text: str) -> Optional[str]:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        print("üîç –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        phone_keywords = self.config['phone_validation']['keywords']
        for keyword in phone_keywords:
            keyword_pattern = f"{keyword}[\\s:]*([\\d\\s\\-\\(\\)\\+]+)"
            matches = re.findall(keyword_pattern, text, re.IGNORECASE)
            if matches:
                potential_phone = matches[0].strip()
                normalized = self._normalize_phone(potential_phone)
                if normalized:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {normalized}")
                    return normalized

        # –ó–∞—Ç–µ–º –∏—â–µ–º –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for i, pattern in enumerate(self.compiled_patterns['phone']):
            matches = pattern.findall(text)
            if matches:
                for match in matches:
                    if isinstance(match, tuple):
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥—Ä—É–ø–ø—ã
                        phone_parts = [part for part in match if part]
                        potential_phone = ''.join(phone_parts)
                    else:
                        potential_phone = match

                    normalized = self._normalize_phone(potential_phone)
                    if normalized:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {i+1}: {normalized}")
                        return normalized

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—â–µ–º –ª—é–±—ã–µ 11 —Ü–∏—Ñ—Ä
        print("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –ª—é–±—ã–µ 11 —Ü–∏—Ñ—Ä...")
        digit_sequences = re.findall(r'\d{10,12}', text)
        for sequence in digit_sequences:
            if len(sequence) == 11 and (sequence.startswith('7') or sequence.startswith('8')):
                normalized = self._normalize_phone(sequence)
                if normalized:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä: {normalized}")
                    return normalized
            elif len(sequence) == 12 and sequence.startswith('+7'):
                normalized = self._normalize_phone(sequence)
                if normalized:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä: {normalized}")
                    return normalized

        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º - –∏—â–µ–º –≥—Ä—É–ø–ø—ã —Ü–∏—Ñ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º
        print("üîç –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º...")
        digit_groups = re.findall(r'\d{2,4}', text)
        if len(digit_groups) >= 3:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –∏–∑ –≥—Ä—É–ø–ø
            for i in range(len(digit_groups) - 2):
                potential_parts = digit_groups[i:i+3]
                if all(len(part) >= 2 for part in potential_parts):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º
                    combined = ''.join(potential_parts)
                    if len(combined) >= 10:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
                        if not combined.startswith('7') and not combined.startswith('8'):
                            combined = '7' + combined
                        elif combined.startswith('8'):
                            combined = '7' + combined[1:]

                        if len(combined) == 11:
                            normalized = self._normalize_phone(combined)
                            if normalized:
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –ø–æ —á–∞—Å—Ç—è–º: {normalized}")
                                return normalized

        print("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    def _normalize_phone(self, phone: str) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É."""
        if not phone:
            return None

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
        cleaned = re.sub(r'[^\d\+]', '', phone)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç
        if len(cleaned) == 11 and cleaned.startswith('7'):
            return cleaned
        elif len(cleaned) == 11 and cleaned.startswith('8'):
            return '7' + cleaned[1:]
        elif len(cleaned) == 12 and cleaned.startswith('+7'):
            return cleaned[1:]
        elif len(cleaned) == 10 and not cleaned.startswith('7'):
            return '7' + cleaned

        return None

    def _extract_amount(self, text: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        print("üîç –ü–æ–∏—Å–∫ —Å—É–º–º—ã...")

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        amount_keywords = self.config['amount_validation']['keywords']
        for keyword in amount_keywords:
            keyword_pattern = f"{keyword}[\\s:]*([\\d\\s\\.,]+)"
            matches = re.findall(keyword_pattern, text, re.IGNORECASE)
            if matches:
                potential_amount = matches[0].strip()
                amount = self._parse_amount_value(potential_amount)
                if amount:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {amount}")
                    return amount

        # –ó–∞—Ç–µ–º –∏—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for pattern in self.compiled_patterns['amount']:
            matches = pattern.findall(text)
            if matches:
                for match in matches:
                    if isinstance(match, tuple):
                        amount_str = match[0]
                    else:
                        amount_str = match

                    amount = self._parse_amount_value(amount_str)
                    if amount:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {amount}")
                        return amount

        print("‚ùå –°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    def _parse_amount_value(self, amount_str: str) -> Optional[float]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å—É–º–º—ã –≤ —á–∏—Å–ª–æ."""
        try:
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            cleaned = amount_str.replace(',', '.').replace(' ', '')
            amount = float(cleaned)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Å—É–º–º—ã
            if 0 < amount < 10000000:  # –û—Ç 0 –¥–æ 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤
                return amount
        except (ValueError, TypeError):
            pass

        return None

    def _extract_account(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        print("üîç –ü–æ–∏—Å–∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞/–∫–∞—Ä—Ç—ã...")

        # –ò—â–µ–º 20-–∑–Ω–∞—á–Ω—ã–µ —Å—á–µ—Ç–∞
        account_20 = re.search(r'\d{20}', text)
        if account_20:
            account = account_20.group(0)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω 20-–∑–Ω–∞—á–Ω—ã–π —Å—á–µ—Ç: {account}")
            return account

        # –ò—â–µ–º 16-–∑–Ω–∞—á–Ω—ã–µ –∫–∞—Ä—Ç—ã
        card_16 = re.search(r'\d{16}', text)
        if card_16:
            card = card_16.group(0)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ 16-–∑–Ω–∞—á–Ω–∞—è –∫–∞—Ä—Ç–∞: {card}")
            return card

        print("‚ùå –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç/–∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None

    def _extract_datetime(self, text: str) -> Tuple[Optional[datetime], Optional[datetime]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        date = None
        time = None

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–∞—Ç—ã
        date_patterns = [
            r'(\d{1,2})[./](\d{1,2})[./](\d{2,4})',
            r'(\d{4})[./](\d{1,2})[./](\d{1,2})',
        ]

        # –ò—â–µ–º –¥–∞—Ç—É
        for pattern in date_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                try:
                    match = matches[0]
                    if len(match) == 3:
                        if len(match[0]) == 4:  # –ì–ì–ì–ì.–ú–ú.–î–î
                            year, month, day = match
                        else:  # –î–î.–ú–ú.–ì–ì–ì–ì
                            day, month, year = match
                        date = datetime(int(year), int(month), int(day))
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {date.date()}")
                        break
                except (ValueError, TypeError):
                    continue

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        time_patterns = [
            r'(\d{1,2}):(\d{2})(?::(\d{2}))?',
        ]

        # –ò—â–µ–º –≤—Ä–µ–º—è
        for pattern in time_patterns:
            matches = re.findall(pattern, text)
            if matches:
                try:
                    match = matches[0]
                    hour, minute = int(match[0]), int(match[1])
                    second = int(match[2]) if len(match) > 2 and match[2] else 0
                    time = datetime(1900, 1, 1, hour, minute, second)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {time.time()}")
                    break
                except (ValueError, TypeError):
                    continue

        return date, time

    def _extract_items(self, text: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ –∏–∑ —á–µ–∫–∞."""
        items = []
        lines = text.split('\n')

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–µ–Ω—É)
            if re.search(r'\d+(?:[.,]\d{2})?', line):
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É
                parts = re.split(r'\s+(\d+(?:[.,]\d{2})?)\s*', line)
                if len(parts) >= 2:
                    name = parts[0].strip()
                    price_str = parts[1].replace(',', '.')
                    try:
                        price = float(price_str)
                        items.append({
                            'name': name,
                            'price': price
                        })
                    except ValueError:
                        continue

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}")
        return items

    def _validate_against_config(self, parsed_data: ParsedData) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        matches = {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        if parsed_data.recipient_phone:
            valid_phones = self.config['phone_validation']['valid_phones']
            matches['phone_valid'] = parsed_data.recipient_phone in valid_phones
        else:
            matches['phone_valid'] = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
        if parsed_data.amount:
            valid_amounts = self.config['amount_validation']['valid_amounts']
            matches['amount_valid'] = any(
                abs(parsed_data.amount - valid_amount) < 0.01
                for valid_amount in valid_amounts
            )
        else:
            matches['amount_valid'] = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
        if parsed_data.recipient_account:
            valid_accounts = self.config['account_validation']['valid_accounts']
            valid_cards = self.config['account_validation']['valid_cards']
            matches['account_valid'] = (
                parsed_data.recipient_account in valid_accounts or
                parsed_data.recipient_account in valid_cards
            )
        else:
            matches['account_valid'] = False

        # –û–±—â–∞—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        matches['overall_valid'] = matches.get('phone_valid', False) and matches.get('amount_valid', False)

        return matches
