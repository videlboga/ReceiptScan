#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: —Å—É–º–º–∞ 1500 –∏ –Ω–æ–º–µ—Ä 7 987 933 55 15."""
import os
import asyncio
import tempfile
import subprocess
import re
from datetime import datetime
from typing import Optional
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from pdf2image import convert_from_path
import PyPDF2

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '7922755841:AAG12lYZ2B8X5-ByauPXwppqCwZfnU-FjJo')

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
TARGET_AMOUNT = 1500
TARGET_PHONE = '79879335515'
TARGET_PHONE_FORMATTED = '7 987 933 55 15'

class ReceiptChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""

    def __init__(self):
        self.target_amount = TARGET_AMOUNT
        self.target_phone = TARGET_PHONE
        self.target_phone_formatted = TARGET_PHONE_FORMATTED

    async def process_receipt(self, file_path: str) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(file_path)[1].lower()
            print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path} (—Ç–∏–ø: {file_ext})")

            if file_ext == '.pdf':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                text = await self.extract_text_from_pdf(file_path)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                text = await self.extract_text(file_path)

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
            receipt_data = self.parse_receipt(text)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ–∫
            validation_result = self.validate_receipt(receipt_data)

            return {
                'success': True,
                'text': text,
                'data': receipt_data,
                'validation': validation_result
            }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    async def extract_text_from_pdf(self, pdf_path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞."""
        try:
            print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF: {pdf_path}")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PDF
            try:
                with open(pdf_path, 'rb') as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    text = ""
                    for page in pdf_reader.pages:
                        text += page.extract_text() + "\n"

                    if text.strip():
                        print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF –Ω–∞–ø—Ä—è–º—É—é: {text[:200]}...")
                        return text.strip()
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é: {e}")

            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR
            print("üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            images = convert_from_path(pdf_path, dpi=300)

            all_text = ""
            for i, image in enumerate(images):
                print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(images)}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_img:
                    image.save(temp_img.name, 'PNG')

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
                    page_text = await self.extract_text(temp_img.name)
                    all_text += page_text + "\n"

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_img.name)

            print(f"üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF —á–µ—Ä–µ–∑ OCR: {all_text[:200]}...")
            return all_text.strip()

        except Exception as e:
            raise Exception(f"PDF processing error: {str(e)}")

    async def extract_text(self, image_path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract."""
        try:
            print(f"üîç –ó–∞–ø—É—Å–∫–∞—é Tesseract –¥–ª—è —Ñ–∞–π–ª–∞: {image_path}")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            psm_modes = ['6', '3', '4', '8']
            best_text = ""
            all_results = {}

            for psm in psm_modes:
                print(f"üîç –ü—Ä–æ–±—É—é —Ä–µ–∂–∏–º PSM {psm}")
                result = subprocess.run([
                    'tesseract', image_path, 'stdout',
                    '-l', 'rus+eng', '--psm', psm,
                    '--oem', '3'
                ], capture_output=True, text=True, timeout=30)

                if result.returncode == 0:
                    text = result.stdout.strip()
                    all_results[psm] = text
                    print(f"‚úÖ PSM {psm} —É—Å–ø–µ—à–Ω–æ:")
                    print(f"üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç PSM {psm}:")
                    print("=" * 50)
                    print(text)
                    print("=" * 50)

                    if len(text) > len(best_text):
                        best_text = text
                else:
                    print(f"‚ùå PSM {psm} failed: {result.stderr}")
                    all_results[psm] = f"ERROR: {result.stderr}"

            if not best_text:
                print("‚ùå –í—Å–µ —Ä–µ–∂–∏–º—ã PSM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏!")
                print("üìä –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                for psm, text in all_results.items():
                    print(f"PSM {psm}: {text}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∏ –æ–¥–Ω–∏–º —Ä–µ–∂–∏–º–æ–º")

            print(f"üìù –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª–∏–Ω–∞: {len(best_text)}):")
            print("=" * 50)
            print(best_text)
            print("=" * 50)
            return best_text

        except subprocess.TimeoutExpired:
            raise Exception("Tesseract timeout")
        except Exception as e:
            raise Exception(f"OCR error: {str(e)}")

    def parse_receipt(self, text: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...")
        print(f"üéØ –ò—â–µ–º —Å—É–º–º—É: {self.target_amount}")
        print(f"üéØ –ò—â–µ–º –Ω–æ–º–µ—Ä: {self.target_phone_formatted}")

        data = {
            'amount': None,
            'account': None,
            'date': None,
            'raw_text': text,
            'target_amount_found': False,
            'target_phone_found': False
        }

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—É–º–º—ã 1500
        data['amount'] = self._find_target_amount(text)
        if data['amount'] == self.target_amount:
            data['target_amount_found'] = True
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: {self.target_amount}")

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        data['account'] = self._find_target_phone(text)
        if data['account']:
            data['target_phone_found'] = True
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['account']}")

        # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã
        data['date'] = self._find_date(text)

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {data}")
        return data

    def _find_target_amount(self, text: str) -> Optional[float]:
        """–ò—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É 1500 –≤ —Ç–µ–∫—Å—Ç–µ."""
        print(f"üîç –ü–æ–∏—Å–∫ —Å—É–º–º—ã {self.target_amount}...")

        # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—É–º–º—ã 1500
        amount_variants = [
            str(self.target_amount),           # 1500
            f"{self.target_amount} —Ä—É–±",       # 1500 —Ä—É–±
            f"{self.target_amount} ‚ÇΩ",         # 1500 ‚ÇΩ
            f"{self.target_amount} —Ä.",        # 1500 —Ä.
            f"{self.target_amount},00",        # 1500,00
            f"{self.target_amount}.00",        # 1500.00
            f"{self.target_amount}–†",          # 1500–†
        ]

        for variant in amount_variants:
            if variant in text:
                print(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ {variant}")
                return float(self.target_amount)

        # –ü–æ–∏—Å–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        spaced_amount = f"{self.target_amount//1000} {self.target_amount%1000:03d}"
        if spaced_amount in text:
            print(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º: {spaced_amount}")
            return float(self.target_amount)

        print(f"‚ùå –°—É–º–º–∞ {self.target_amount} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    def _find_target_phone(self, text: str) -> Optional[str]:
        """–ò—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ."""
        print(f"üîç –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {self.target_phone_formatted}...")

        # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        phone_variants = [
            self.target_phone,                    # 79879335515
            self.target_phone_formatted,          # 7 987 933 55 15
            f"+{self.target_phone}",              # +79879335515
            f"+{self.target_phone[:1]} {self.target_phone[1:4]} {self.target_phone[4:7]} {self.target_phone[7:9]} {self.target_phone[9:11]}",  # +7 987 933 55 15
            f"8{self.target_phone[1:]}",          # 89879335515
            f"8 {self.target_phone[1:4]} {self.target_phone[4:7]} {self.target_phone[7:9]} {self.target_phone[9:11]}",  # 8 987 933 55 15
        ]

        for variant in phone_variants:
            if variant in text:
                print(f"üì± –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {variant}")
                return variant

        # –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        phone_patterns = [
            r'\+?7\s*9\s*8\s*7\s*9\s*3\s*3\s*5\s*5\s*1\s*5',
            r'\+?7\s*987\s*933\s*55\s*15',
            r'\+?7\s*987\s*933\s*5515',
            r'\+?79879335515',
        ]

        for pattern in phone_patterns:
            match = re.search(pattern, text)
            if match:
                found_phone = match.group(0).strip()
                print(f"üì± –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {found_phone}")
                return found_phone

        print(f"‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {self.target_phone_formatted} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    def _find_date(self, text: str) -> Optional[str]:
        """–ò—â–µ—Ç –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ."""
        date_patterns = [
            r'(\d{1,2}[./]\d{1,2}[./]\d{2,4})',
            r'(\d{4}-\d{2}-\d{2})',
            r'(\d{1,2}\s+\d{1,2}\s+\d{2,4})',
        ]

        for pattern in date_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                date = matches[0]
                print(f"üìÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {date}")
                return date

        return None

    def validate_receipt(self, data: dict) -> dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º."""
        result = {
            'valid': False,
            'errors': [],
            'warnings': []
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –æ–±–∞ —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è
        if data['target_amount_found'] and data['target_phone_found']:
            result['valid'] = True
            result['warnings'].append("–ù–∞–π–¥–µ–Ω—ã –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
        else:
            if not data['target_amount_found']:
                result['errors'].append(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ {self.target_amount}")
            if not data['target_phone_found']:
                result['errors'].append(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {self.target_phone_formatted}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if data['amount']:
            result['warnings'].append(f"–ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞: {data['amount']}")
        if data['account']:
            result['warnings'].append(f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä: {data['account']}")
        if data['date']:
            result['warnings'].append(f"–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {data['date']}")

        return result

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫–∞
checker = ReceiptChecker()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "ü§ñ **–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ v4 - –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π**\n\n"
        "üéØ **–ò—â–µ–º –≤ —á–µ–∫–µ:**\n"
        f"‚Ä¢ –°—É–º–º—É: **{checker.target_amount} —Ä—É–±**\n"
        f"‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: **{checker.target_phone_formatted}**\n\n"
        "‚úÖ **–ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è - —á–µ–∫ –≤–∞–ª–∏–¥–µ–Ω!**\n\n"
        "üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –∏–ª–∏ PDF —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏**"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    print("=" * 60)
    print("üì∏ –ü–û–õ–£–ß–ï–ù–û –§–û–¢–û –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 60)
    await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ò—â—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(update.message.photo[-1].file_id)
        print(f"üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file.file_id}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file.file_size} –±–∞–π—Ç")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_file.name}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(temp_file.name)
            print(f"üíæ –†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
            print("üîç –ù–ê–ß–ò–ù–ê–Æ –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô...")
            result = await checker.process_receipt(temp_file.name)
            print("=" * 60)
            print("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            print("=" * 60)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print("=" * 60)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
            print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file.name}")

        if result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_result(update, result)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF)."""
    document = update.message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
    if not document.file_name.lower().endswith('.pdf'):
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    print("=" * 60)
    print("üìÑ –ü–û–õ–£–ß–ï–ù PDF –î–û–ö–£–ú–ï–ù–¢")
    print("=" * 60)
    await update.message.reply_text("üìÑ PDF –ø–æ–ª—É—á–µ–Ω! –ò—â—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        print(f"üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file.file_id}")
        print(f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {document.file_name}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {document.file_size} –±–∞–π—Ç")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_file.name}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(temp_file.name)
            print(f"üíæ –†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
            print("üîç –ù–ê–ß–ò–ù–ê–Æ –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô...")
            result = await checker.process_receipt(temp_file.name)
            print("=" * 60)
            print("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            print("=" * 60)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print("=" * 60)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
            print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file.name}")

        if result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_result(update, result)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def send_result(update: Update, result: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    data = result['data']
    validation = result['validation']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (v4):**\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if data['target_amount_found']:
        message += f"‚úÖ **–°—É–º–º–∞ {checker.target_amount}:** –Ω–∞–π–¥–µ–Ω–∞!\n"
    else:
        message += f"‚ùå **–°—É–º–º–∞ {checker.target_amount}:** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"

    if data['target_phone_found']:
        message += f"‚úÖ **–ù–æ–º–µ—Ä {checker.target_phone_formatted}:** –Ω–∞–π–¥–µ–Ω!\n"
    else:
        message += f"‚ùå **–ù–æ–º–µ—Ä {checker.target_phone_formatted}:** –Ω–µ –Ω–∞–π–¥–µ–Ω\n"

    message += "\n"

    if validation['valid']:
        message += "üéâ **–°–¢–ê–¢–£–°: –ß–ï–ö –í–ê–õ–ò–î–ï–ù!**\n"
        message += "‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
    else:
        message += "‚ùå **–°–¢–ê–¢–£–°: –ß–ï–ö –ù–ï –í–ê–õ–ò–î–ï–ù**\n"
        message += "üö´ –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n"

    if validation['warnings']:
        message += "\nüìã **–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        for warning in validation['warnings']:
            message += f"‚Ä¢ {warning}\n"

    if validation['errors']:
        message += "\nüö´ **–û—à–∏–±–∫–∏:**\n"
        for error in validation['errors']:
            message += f"‚Ä¢ {error}\n"

    await update.message.reply_text(message)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ v4 (–ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)...")
    print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {BOT_TOKEN[:20]}...")
    print(f"üéØ –ò—â–µ–º —Å—É–º–º—É: {checker.target_amount}")
    print(f"üéØ –ò—â–µ–º –Ω–æ–º–µ—Ä: {checker.target_phone_formatted}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    print("–ë–æ—Ç v4 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
