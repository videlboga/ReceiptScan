#!/usr/bin/env python3
"""–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º."""
import os
import asyncio
import tempfile
import subprocess
import re
from datetime import datetime
from typing import Optional
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from pdf2image import convert_from_path
import PyPDF2
from bot_config import VALIDATION_CONFIG, PARSING_CONFIG, OCR_CONFIG, BOT_CONFIG

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '7922755841:AAG12lYZ2B8X5-ByauPXwppqCwZfnU-FjJo')

class ReceiptChecker:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º."""

    def __init__(self):
        self.validation_rules = VALIDATION_CONFIG
        self.parsing_rules = PARSING_CONFIG
        self.ocr_config = OCR_CONFIG

    async def process_receipt(self, file_path: str) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(file_path)[1].lower()
            print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path} (—Ç–∏–ø: {file_ext})")

            if file_ext == '.pdf':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                text = await self.extract_text_from_pdf(file_path)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                text = await self.extract_text(file_path)

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
            receipt_data = self.parse_receipt(text)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ–∫
            validation_result = self.validate_receipt(receipt_data)

            return {
                'success': True,
                'text': text,
                'data': receipt_data,
                'validation': validation_result
            }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    async def extract_text_from_pdf(self, pdf_path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞."""
        try:
            print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF: {pdf_path}")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PDF
            try:
                with open(pdf_path, 'rb') as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    text = ""
                    for page in pdf_reader.pages:
                        text += page.extract_text() + "\n"

                    if text.strip():
                        print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF –Ω–∞–ø—Ä—è–º—É—é: {text[:200]}...")
                        return text.strip()
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é: {e}")

            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR
            print("üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            images = convert_from_path(pdf_path, dpi=300)

            all_text = ""
            for i, image in enumerate(images):
                print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(images)}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_img:
                    image.save(temp_img.name, 'PNG')

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
                    page_text = await self.extract_text(temp_img.name)
                    all_text += page_text + "\n"

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_img.name)

            print(f"üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ PDF —á–µ—Ä–µ–∑ OCR: {all_text[:200]}...")
            return all_text.strip()

        except Exception as e:
            raise Exception(f"PDF processing error: {str(e)}")

    async def extract_text(self, image_path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract."""
        try:
            print(f"üîç –ó–∞–ø—É—Å–∫–∞—é Tesseract –¥–ª—è —Ñ–∞–π–ª–∞: {image_path}")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            psm_modes = self.ocr_config['psm_modes']
            best_text = ""
            all_results = {}

            for psm in psm_modes:
                print(f"üîç –ü—Ä–æ–±—É—é —Ä–µ–∂–∏–º PSM {psm}")
                result = subprocess.run([
                    'tesseract', image_path, 'stdout',
                    '-l', self.ocr_config['languages'], '--psm', psm,
                    '--oem', self.ocr_config['oem_mode']
                ], capture_output=True, text=True, timeout=self.ocr_config['timeout'])

                if result.returncode == 0:
                    text = result.stdout.strip()
                    all_results[psm] = text
                    print(f"‚úÖ PSM {psm} —É—Å–ø–µ—à–Ω–æ:")
                    print(f"üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç PSM {psm}:")
                    print("=" * 50)
                    print(text)
                    print("=" * 50)

                    if len(text) > len(best_text):
                        best_text = text
                else:
                    print(f"‚ùå PSM {psm} failed: {result.stderr}")
                    all_results[psm] = f"ERROR: {result.stderr}"

            if not best_text:
                print("‚ùå –í—Å–µ —Ä–µ–∂–∏–º—ã PSM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏!")
                print("üìä –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                for psm, text in all_results.items():
                    print(f"PSM {psm}: {text}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∏ –æ–¥–Ω–∏–º —Ä–µ–∂–∏–º–æ–º")

            print(f"üìù –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª–∏–Ω–∞: {len(best_text)}):")
            print("=" * 50)
            print(best_text)
            print("=" * 50)
            return best_text

        except subprocess.TimeoutExpired:
            raise Exception("Tesseract timeout")
        except Exception as e:
            raise Exception(f"OCR error: {str(e)}")

    def parse_receipt(self, text: str) -> dict:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞: {text[:200]}...")

        data = {
            'amount': None,
            'account': None,
            'date': None,
            'raw_text': text
        }

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –¥–∞—Ç—ã, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∏—Ö –∏–∑ –ø–æ–∏—Å–∫–∞ —Å—É–º–º
        date_patterns = [
            r'(\d{1,2}[./]\d{1,2}[./]\d{2,4})',
            r'(\d{4}-\d{2}-\d{2})',
            r'(\d{1,2}\s+\d{1,2}\s+\d{2,4})',
            r'–¥–∞—Ç–∞[:\s]*(\d{1,2}[./]\d{1,2}[./]\d{2,4})',
        ]

        dates_found = []
        for pattern in date_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            dates_found.extend(matches)

        print(f"üìÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: {dates_found}")

        # –ò—â–µ–º —Å—É–º–º—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        data['amount'] = self._find_amount(text, dates_found)

        # –ò—â–µ–º –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã
        account_patterns = [
            # –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç —Å –Ω–æ–º–µ—Ä–∞–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            r'—Å—á—ë—Ç[:\s]*—Å–ø–∏—Å–∞–Ω–∏—è[:\s]*([^‚Ä¢]+?)\s*‚Ä¢+\s*(\d+)',
            r'—Å—á–µ—Ç[:\s]*—Å–ø–∏—Å–∞–Ω–∏—è[:\s]*([^‚Ä¢]+?)\s*‚Ä¢+\s*(\d+)',
            r'–∫–∞—Ä—Ç–∞[:\s]*([^‚Ä¢]+?)\s*‚Ä¢+\s*(\d+)',
            r'–ú–ò–†[:\s]*([^‚Ä¢]+?)\s*‚Ä¢+\s*(\d+)',
            r'VISA[:\s]*([^‚Ä¢]+?)\s*‚Ä¢+\s*(\d+)',
            r'MASTERCARD[:\s]*([^‚Ä¢]+?)\s*‚Ä¢+\s*(\d+)',
            
            # –ù–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç (16 —Ü–∏—Ñ—Ä)
            r'(\d{16})',  # 16 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
            r'(\d{4}\s*\d{4}\s*\d{4}\s*\d{4})',  # –° –ø—Ä–æ–±–µ–ª–∞–º–∏
            r'–Ω–æ–º–µ—Ä[:\s]*–∫–∞—Ä—Ç—ã[:\s]*(\d{16})',
            r'–Ω–æ–º–µ—Ä[:\s]*–∫–∞—Ä—Ç—ã[:\s]*(\d{4}\s*\d{4}\s*\d{4}\s*\d{4})',
            r'–∫–∞—Ä—Ç–∞[:\s]*(\d{16})',
            r'–∫–∞—Ä—Ç–∞[:\s]*(\d{4}\s*\d{4}\s*\d{4}\s*\d{4})',
            r'–ø–æ\s*–Ω–æ–º–µ—Ä—É\s*–∫–∞—Ä—Ç—ã[:\s]*(\d{16})',
            r'–ø–æ\s*–Ω–æ–º–µ—Ä—É\s*–∫–∞—Ä—Ç—ã[:\s]*(\d{4}\s*\d{4}\s*\d{4}\s*\d{4})',

            # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞ (20 —Ü–∏—Ñ—Ä)
            r'(\d{20})',
            r'(\d{4}\s*\d{4}\s*\d{4}\s*\d{4}\s*\d{4})',
            r'—Å—á–µ—Ç[:\s]*(\d{16,20})',
            r'–ø–æ–ª—É—á–∞—Ç–µ–ª—å[:\s]*(\d{16,20})',
            r'—Ä/—Å[:\s]*(\d{16,20})',
            r'—Ä–∞—Å—á–µ—Ç–Ω—ã–π[:\s]*—Å—á–µ—Ç[:\s]*(\d{16,20})',

            # –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            r'(\+7\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2})',
            r'(8\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2})',
            r'(\d{3}\s*\d{3}\s*\d{2}\s*\d{2})',
            r'—Ç–µ–ª–µ—Ñ–æ–Ω[:\s]*(\+?[78]\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2})',
        ]

        for pattern in account_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                if len(match.groups()) >= 2:
                    # –ü–∞—Ç—Ç–µ—Ä–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã –∏ –Ω–æ–º–µ—Ä–æ–º
                    card_name = match.group(1).strip()
                    card_number = match.group(2).strip()
                    data['account'] = f"{card_name} ‚Ä¢‚Ä¢ {card_number}"
                    print(f"üí≥ –ù–∞–π–¥–µ–Ω —Å—á–µ—Ç –∫–∞—Ä—Ç—ã: {card_name} ‚Ä¢‚Ä¢ {card_number}")
                    break
                else:
                    # –û–±—ã—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å –Ω–æ–º–µ—Ä–æ–º
                    account = re.sub(r'\s+', '', match.group(1))  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                    if len(account) == 20 and account.isdigit():
                        data['account'] = account
                        print(f"üè¶ –ù–∞–π–¥–µ–Ω –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç: {account}")
                        break
                    elif len(account) == 16 and account.isdigit():
                        data['account'] = account
                        print(f"üí≥ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {account}")
                        break
                    elif len(account) >= 10 and (account.startswith('7') or account.startswith('8')):
                        data['account'] = account
                        print(f"üì± –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {account}")
                        break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
        if dates_found:
            data['date'] = dates_found[0]
            print(f"üìÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {dates_found[0]}")

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {data}")
        return data

    def _find_amount(self, text: str, dates_found: list) -> Optional[float]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—É–º–º—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π, –∏—Å–∫–ª—é—á–∞—è –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç."""
        print("üîç –ü–æ–∏—Å–∫ —Å—É–º–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π...")

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É–º–º—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        for keyword in self.parsing_rules['amount_keywords']:
            patterns = [
                rf'{keyword}[:\s]*(\d+)\s*—Ä—É–±',
                rf'{keyword}[:\s]*(\d+[.,]\d{{2}})\s*—Ä—É–±',
                rf'{keyword}[:\s]*(\d+)\s*‚ÇΩ',
                rf'{keyword}[:\s]*(\d+[.,]\d{{2}})\s*‚ÇΩ',
                rf'{keyword}[:\s]*(\d+)\s*—Ä\.',
                rf'{keyword}[:\s]*(\d+[.,]\d{{2}})\s*—Ä\.',
            ]

            for pattern in patterns:
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    amount_str = match.group(1).replace(',', '.')
                    try:
                        amount = float(amount_str)
                        if self.validation_rules['min_amount'] <= amount <= self.validation_rules['max_amount']:
                            print(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {amount}")
                            return amount
                    except ValueError:
                        continue

        # –ó–∞—Ç–µ–º –∏—â–µ–º —Å—É–º–º—ã —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        amount_patterns = [
            r'(\d+)\s*—Ä—É–±',
            r'(\d+[.,]\d{2})\s*—Ä—É–±',
            r'(\d+)\s*‚ÇΩ',
            r'(\d+[.,]\d{2})\s*‚ÇΩ',
            r'(\d+)\s*—Ä\.',
            r'(\d+[.,]\d{2})\s*—Ä\.',
        ]

        for pattern in amount_patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                amount_str = match.group(1).replace(',', '.')
                try:
                    amount = float(amount_str)
                    if self.validation_rules['min_amount'] <= amount <= self.validation_rules['max_amount']:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç
                        start_pos = max(0, match.start() - 50)
                        end_pos = min(len(text), match.end() + 50)
                        context = text[start_pos:end_pos].lower()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ –∫—É—Ä—Å –≤–∞–ª—é—Ç, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã
                        has_exclusion = False
                        for exclusion in self.parsing_rules['amount_exclusions']:
                            if exclusion in context:
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—É—Ä—Å
                                if '–∫—É—Ä—Å' in exclusion or '–æ–±–º–µ–Ω' in exclusion or 'exchange' in exclusion:
                                    has_exclusion = True
                                    break

                        if not has_exclusion:
                            print(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞: {amount} (–∫–æ–Ω—Ç–µ–∫—Å—Ç: {context})")
                            return amount
                        else:
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—É–º–º–∞ {amount} - –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context}")
                except ValueError:
                    continue

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—É–º–º—É —Å –≤–∞–ª—é—Ç–æ–π, –∏—â–µ–º —á–∏—Å–ª–∞ —Å –∫–æ–ø–µ–π–∫–∞–º–∏, –∏—Å–∫–ª—é—á–∞—è –¥–∞—Ç—ã –∏ –∫—É—Ä—Å—ã
        all_numbers = re.findall(r'(\d+[.,]\d{2})', text)
        print(f"üî¢ –í—Å–µ —á–∏—Å–ª–∞ —Å –∫–æ–ø–µ–π–∫–∞–º–∏: {all_numbers}")

        for number_str in all_numbers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∞—Ç–æ–π
            is_date = any(number_str in date or date in number_str for date in dates_found)

            if not is_date:
                try:
                    amount = float(number_str.replace(',', '.'))
                    if self.validation_rules['min_amount'] <= amount <= self.validation_rules['max_amount']:
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        pos = text.find(number_str)
                        if pos != -1:
                            start_pos = max(0, pos - 50)
                            end_pos = min(len(text), pos + len(number_str) + 50)
                            context = text[start_pos:end_pos].lower()

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                            has_exclusion = False
                            for exclusion in self.parsing_rules['amount_exclusions']:
                                if exclusion in context:
                                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—É—Ä—Å
                                    if '–∫—É—Ä—Å' in exclusion or '–æ–±–º–µ–Ω' in exclusion or 'exchange' in exclusion:
                                        has_exclusion = True
                                        break

                            if not has_exclusion:
                                print(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ (–±–µ–∑ –≤–∞–ª—é—Ç—ã): {amount}")
                                return amount
                            else:
                                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—É–º–º–∞ {amount} - –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è: {context}")
                except ValueError:
                    continue

        print("‚ùå –°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    def validate_receipt(self, data: dict) -> dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞."""
        result = {
            'valid': True,
            'errors': [],
            'warnings': []
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
        if data['amount'] is None:
            result['valid'] = False
            result['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É")
        elif data['amount'] < self.validation_rules['min_amount']:
            result['valid'] = False
            result['errors'].append(f"–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ (–º–∏–Ω–∏–º—É–º {self.validation_rules['min_amount']} —Ä—É–±)")
        elif data['amount'] > self.validation_rules['max_amount']:
            result['valid'] = False
            result['errors'].append(f"–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ (–º–∞–∫—Å–∏–º—É–º {self.validation_rules['max_amount']} —Ä—É–±)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç/–∫–∞—Ä—Ç—É/—Ç–µ–ª–µ—Ñ–æ–Ω
        if data['account'] is None:
            result['warnings'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞/–∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        else:
            account = data['account']
            is_valid = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É –Ω–æ–º–µ—Ä–∞
            if len(account) == 20 and account.isdigit():
                # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç
                if account in self.validation_rules['valid_accounts']:
                    is_valid = True
            elif len(account) == 16 and account.isdigit():
                # –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                if account in self.validation_rules['valid_cards']:
                    is_valid = True
            elif len(account) >= 10 and (account.startswith('7') or account.startswith('8')):
                # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                if account in self.validation_rules['valid_phones']:
                    is_valid = True
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
                for valid_card in self.validation_rules['valid_cards']:
                    if valid_card in account:
                        is_valid = True
                        break

            if not is_valid:
                result['warnings'].append("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞/–∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤–∞–ª–∏–¥–Ω—ã—Ö")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
        if data['date'] is None:
            result['warnings'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É")

        return result

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫–∞
checker = ReceiptChecker()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤! (v3 - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)**\n\n"
        "üìã **–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤ –Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é OCR\n"
        "‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –∏ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞\n"
        "‚Ä¢ –í—ã–¥–∞—á–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ\n\n"
        "üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –∏–ª–∏ PDF —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏**"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    print("=" * 60)
    print("üì∏ –ü–û–õ–£–ß–ï–ù–û –§–û–¢–û –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 60)
    await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(update.message.photo[-1].file_id)
        print(f"üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file.file_id}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file.file_size} –±–∞–π—Ç")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_file.name}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(temp_file.name)
            print(f"üíæ –†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
            print("üîç –ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ –ß–ï–ö–ê...")
            result = await checker.process_receipt(temp_file.name)
            print("=" * 60)
            print("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            print("=" * 60)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print("=" * 60)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
            print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file.name}")

        if result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_result(update, result)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF)."""
    document = update.message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
    if not document.file_name.lower().endswith('.pdf'):
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    print("=" * 60)
    print("üìÑ –ü–û–õ–£–ß–ï–ù PDF –î–û–ö–£–ú–ï–ù–¢")
    print("=" * 60)
    await update.message.reply_text("üìÑ PDF –ø–æ–ª—É—á–µ–Ω! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        print(f"üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file.file_id}")
        print(f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {document.file_name}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {document.file_size} –±–∞–π—Ç")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_file.name}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(temp_file.name)
            print(f"üíæ –†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
            print("üîç –ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ PDF...")
            result = await checker.process_receipt(temp_file.name)
            print("=" * 60)
            print("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            print("=" * 60)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print("=" * 60)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
            print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file.name}")

        if result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_result(update, result)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def send_result(update: Update, result: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    data = result['data']
    validation = result['validation']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞ (v3):**\n\n"

    if data['amount']:
        message += f"üí∞ **–°—É–º–º–∞:** {data['amount']:.2f} —Ä—É–±\n"
    else:
        message += "üí∞ **–°—É–º–º–∞:** –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞\n"

    if data['account']:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—á–µ—Ç–∞
        account = data['account']
        if len(account) == 20 and account.isdigit():
            account_type = "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç"
        elif len(account) == 16 and account.isdigit():
            account_type = "üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
        elif len(account) >= 10 and (account.startswith('7') or account.startswith('8')):
            account_type = "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        else:
            account_type = "üí≥ –ö–∞—Ä—Ç–∞"

        message += f"{account_type}: {account}\n"
    else:
        message += "üî¢ **–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞/–∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞:** –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n"

    if data['date']:
        message += f"üìÖ **–î–∞—Ç–∞:** {data['date']}\n"
    else:
        message += "üìÖ **–î–∞—Ç–∞:** –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞\n"

    message += "\n"

    if validation['valid']:
        message += "‚úÖ **–°—Ç–∞—Ç—É—Å:** –ß–µ–∫ –≤–∞–ª–∏–¥–µ–Ω\n"
        if validation['warnings']:
            message += "\n‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in validation['warnings']:
                message += f"‚Ä¢ {warning}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        await send_certificate(update, data)
    else:
        message += "‚ùå **–°—Ç–∞—Ç—É—Å:** –ß–µ–∫ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω\n"
        if validation['errors']:
            message += "\nüö´ **–û—à–∏–±–∫–∏:**\n"
            for error in validation['errors']:
                message += f"‚Ä¢ {error}\n"

    await update.message.reply_text(message)

async def send_certificate(update: Update, data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ."""
    certificate_text = f"""
üìú **–°–ï–†–¢–ò–§–ò–ö–ê–¢ –ü–†–û–í–ï–†–ö–ò –ß–ï–ö–ê (v3)**

‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø—Ä–∏–∑–Ω–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–º

üìä **–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:**
‚Ä¢ –°—É–º–º–∞: {data['amount']:.2f} —Ä—É–±
‚Ä¢ –°—á–µ—Ç: {data['account'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
‚Ä¢ –î–∞—Ç–∞: {data['date'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}

üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

ü§ñ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É–ª—É—á—à–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ v3
"""

    await update.message.reply_text(certificate_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤ v3...")
    print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {BOT_TOKEN[:20]}...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    print("–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç v3 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
